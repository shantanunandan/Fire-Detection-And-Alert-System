#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Apr 01, 2018 05:04:51 PM

import sys
import welcome
import time
import readClass

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import sensorList_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = sensorList (root)
    sensorList_support.init(root, top)
    root.mainloop()

w = None
def create_sensorList(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = sensorList (w)
    sensorList_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_sensorList():
    global w
    w.destroy()
    w = None


class sensorList:
    time1 = ''

    def homeWindow(self):
        self.master.withdraw()
        root2 = Toplevel(self.master)
        readClass.readClass().clearing()
        self.homeWindow = welcome.welcome(root2)

    def tick(self):
        self.time1
        # get the current local time from the PC
        time2 = time.strftime('%H:%M:%S')
        # if time string has changed, update it
        if time2 != self.timeDisplay:
            time1 = time2
            self.timeDisplay.config(text=time2)
        # calls itself every 200 milliseconds
        # to update the time display as needed
        # could use >200 ms, but display gets jerky
            self.timeDisplay.after(200, self.tick)

    def refreshButton(self):
        if readClass.readClass().readStatus("fire.txt") == "fire1":
            self.fireSensorStatus.configure(bg='red')
        else:
            self.fireSensorStatus.configure(bg='green')        
        if readClass.readClass().readStatus("temp.txt") == "temrature1":
            self.temratureSensorStatus.configure(bg='red')
        else:
            self.temratureSensorStatus.configure(bg='green')
        if readClass.readClass().readStatus("motion.txt") == "motion1":
            self.motionSensorStatus.configure(bg='red')
        else:
            self.motionSensorStatus.configure(bg='green')
        if readClass.readClass().readStatus("gas.txt") == "gas1":
            self.gasSensorStatus.configure(bg='red')
        else:
            self.gasSensorStatus.configure(bg='green')

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {DejaVu Sans} -size 12 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font11 = "-family {DejaVu Sans} -size 16 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 20 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("628x462+466+174")
        top.title("sensorList")

        self.master = top

        self.Label1 = Label(top)
        self.Label1.place(relx=0.18, rely=0.04, height=34, width=396)
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#3c0000")
        self.Label1.configure(text='''Sensor Listing''')
        self.Label1.configure(width=396)

        self.timeDisplay = Label(top)
        self.timeDisplay.place(relx=0.33, rely=0.15, height=24, width=196)
        self.timeDisplay.configure(font=font11)
        self.timeDisplay.configure(width=196)
        self.tick()
        self.timeDisplay.configure(font=('times', 20, 'bold'))

        self.sensorFrame = Frame(top)
        self.sensorFrame.place(relx=0.16, rely=0.22, relheight=0.53
                , relwidth=0.68)
        self.sensorFrame.configure(relief=GROOVE)
        self.sensorFrame.configure(borderwidth="2")
        self.sensorFrame.configure(relief=GROOVE)
        self.sensorFrame.configure(width=425)

        self.Label3 = Label(self.sensorFrame)
        self.Label3.place(relx=0.16, rely=0.08, height=39, width=86)
        self.Label3.configure(font="TkDefaultFontfont10")
        self.Label3.configure(text='''Sensors''')
        self.Label3.configure(width=86)

        self.Label4 = Label(self.sensorFrame)
        self.Label4.place(relx=0.66, rely=0.08, height=39, width=86)
        self.Label4.configure(font=font10)
        self.Label4.configure(text='''Status''')
        self.Label4.configure(width=86)

        self.Label5 = Label(self.sensorFrame)
        self.Label5.place(relx=0.16, rely=0.33, height=29, width=86)
        self.Label5.configure(text='''Fire Sensor''')
        self.Label5.configure(width=86)

        self.fireSensorStatus = Label(self.sensorFrame)
        self.fireSensorStatus.place(relx=0.68, rely=0.33, height=16, width=86)
        self.fireSensorStatus.configure(bg='green')
        self.fireSensorStatus.configure(width=86)

        self.Label5_1 = Label(self.sensorFrame)
        self.Label5_1.place(relx=0.16, rely=0.5, height=29, width=96)
        self.Label5_1.configure(activebackground="#f9f9f9")
        self.Label5_1.configure(text='''Motion Sensor''')
        self.Label5_1.configure(width=96)

        self.Label5_1_1 = Label(self.sensorFrame)
        self.Label5_1_1.place(relx=0.16, rely=0.67, height=29, width=116)
        self.Label5_1_1.configure(activebackground="#f9f9f9")
        self.Label5_1_1.configure(text='''Temrature Sensor''')
        self.Label5_1_1.configure(width=116)

        self.Label5_1_1_1 = Label(self.sensorFrame)
        self.Label5_1_1_1.place(relx=0.19, rely=0.82, height=29, width=76)
        self.Label5_1_1_1.configure(activebackground="#f9f9f9")
        self.Label5_1_1_1.configure(text='''Gas Sensor''')

        self.motionSensorStatus = Label(self.sensorFrame)
        self.motionSensorStatus.place(relx=0.68, rely=0.5, height=16, width=86)
        self.motionSensorStatus.configure(activebackground="#f9f9f9")
        self.motionSensorStatus.configure(bg='green')
        self.motionSensorStatus.configure(width=86)

        self.temratureSensorStatus = Label(self.sensorFrame)
        self.temratureSensorStatus.place(relx=0.68, rely=0.66, height=16
                , width=86)
        self.temratureSensorStatus.configure(activebackground="#f9f9f9")
        self.temratureSensorStatus.configure(bg='green')
        self.temratureSensorStatus.configure(width=86)

        self.gasSensorStatus = Label(self.sensorFrame)
        self.gasSensorStatus.place(relx=0.68, rely=0.82, height=16, width=86)
        self.gasSensorStatus.configure(activebackground="#f9f9f9")
        self.gasSensorStatus.configure(bg='green')
        self.gasSensorStatus.configure(width=86)

        self.homeBtn = Button(top)
        self.homeBtn.place(relx=0.16, rely=0.84, height=37, width=187)
        self.homeBtn.configure(activebackground="#d9d9d9")
        self.homeBtn.configure(text='''Home''')
        self.homeBtn.configure(width=187)
        self.homeBtn.configure(command=self.homeWindow)

        self.refresh = Button(top)
        self.refresh.place(relx=0.60, rely=0.84, height=37, width=157)
        self.refresh.configure(activebackground="#d9d9d9")
        self.refresh.configure(text='''Refresh''')
        self.refresh.configure(width=157)
        self.refresh.configure(command=self.refreshButton)


if __name__ == '__main__':
    vp_start_gui()



