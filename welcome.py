#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Mar 31, 2018 11:54:09 PM

import sys
import admin
import sensorList

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import time
import welcome_support
import armSensor
#import multi
import disarmSensor

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = welcome (root)
    welcome_support.init(root, top)
    root.mainloop()

w = None
def create_welcome(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = welcome (w)
    welcome_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_welcome():
    global w
    w.destroy()
    w = None


class welcome:
    time1 = '' 
    def adminWindow(self):
        self.master.withdraw()
        exit(0)

    def armWindow(self):
        armSensor.armSensor()

    def disarmWindow(self):
        disarmSensor.disarmSensor()

    def sensorWindow(self):
        self.master.withdraw()
        root2 = Toplevel(self.master)
        self.sensorWindow = sensorList.sensorList(root2)

    def tick(self):
        self.time1
        # get the current local time from the PC
        time2 = time.strftime('%H:%M:%S')
        # if time string has changed, update it
        if time2 != self.time1:
            time1 = time2
            self.time.config(text=time2)
        # calls itself every 200 milliseconds
        # to update the time display as needed
        # could use >200 ms, but display gets jerky
            self.time.after(200, self.tick)

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font9 = "-family {DejaVu Sans} -size 20 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("600x450+488+216")
        top.title("welcome")

        self.master = top

        self.Label1 = Label(top)
        self.Label1.place(relx=0.18, rely=0.07, height=29, width=416)
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#500300")
        self.Label1.configure(highlightbackground="#44a3d9")
        self.Label1.configure(highlightcolor="#090000")
        self.Label1.configure(text='''Welcome To Admin Panel''')
        self.Label1.configure(width=416)

        self.time = Label(top)
        self.time.place(relx=0.25, rely=0.22, height=39, width=326)
        self.time.configure(width=326)
        self.tick()
        self.time.configure(font=('times', 20, 'bold'))

        self.arm = Button(top)
        self.arm.place(relx=0.22, rely=0.38, height=57, width=147)
        self.arm.configure(activebackground="#d9d9d9")
        self.arm.configure(text='''Arm Sensor''')
        self.arm.configure(width=147)
        self.arm.configure(command=self.armWindow)

        self.disarm = Button(top)
        self.disarm.place(relx=0.6, rely=0.38, height=57, width=147)
        self.disarm.configure(activebackground="#d9d9d9")
        self.disarm.configure(text='''Disarm Sensor''')
        self.disarm.configure(width=147)
        self.disarm.configure(command=self.disarmWindow)

        self.sensor = Button(top)
        self.sensor.place(relx=0.22, rely=0.64, height=57, width=147)
        self.sensor.configure(activebackground="#d9d9d9")
        self.sensor.configure(text='''Sensor List''')
        self.sensor.configure(width=147)
        self.sensor.configure(command=self.sensorWindow)

        self.home = Button(top)
        self.home.place(relx=0.6, rely=0.64, height=57, width=147)
        self.home.configure(activebackground="#d9d9d9")
        self.home.configure(text='''Exit Monitoring''')
        self.home.configure(width=147)
        self.home.configure(command=self.adminWindow)






if __name__ == '__main__':
    vp_start_gui()



